**Python Week 1 Learning Plan**

## **Day 1-2: Python Basics**
### **Concepts to Cover:**
- **Installing Python and Setting Up the Environment**: Install Python from [python.org](https://www.python.org/), set up VS Code/PyCharm, and configure the terminal.
- **Understanding the Python Interpreter and Script Execution**: Learn how to run Python in interactive mode (`python` in terminal) and execute scripts (`python script.py`).
- **Variables and Data Types**: Python supports `int`, `float`, `str`, `bool`, and more.
  ```python
  age = 25  # Integer
  height = 5.9  # Float
  name = "Alice"  # String
  is_student = True  # Boolean
  ```
- **Basic I/O Operations**: Get user input and display output.
  ```python
  name = input("Enter your name: ")
  print(f"Hello, {name}!")
  ```
- **Operators**: Arithmetic (`+`, `-`, `*`, `/`), comparison (`==`, `!=`, `>`, `<`), logical (`and`, `or`, `not`).
- **Conditional Statements**: Control flow using `if-elif-else`.
  ```python
  age = int(input("Enter your age: "))
  if age >= 18:
      print("You are an adult.")
  else:
      print("You are a minor.")
  ```
- **Loops**: Repeating tasks with `for` and `while`.
  ```python
  for i in range(5):
      print(f"Iteration {i}")
  ```

### **Why These Concepts Matter:**
Understanding these basics is crucial because every program, whether simple or complex, relies on them. Without them, you cannot build logic in Python.

### **Production-Level Tip:**
Use `f-strings` for clean and readable output formatting.
```python
name = "Alice"
age = 25
print(f"Hello, my name is {name} and I am {age} years old.")
```

---

## **Day 3: Functions & Data Structures**
### **Concepts to Cover:**
- **Defining Functions**: Functions help reuse code and keep it organized.
  ```python
  def greet(name):
      return f"Hello, {name}!"
  print(greet("Alice"))
  ```
- **Function Arguments & Return Values**:
  ```python
  def add(a, b):
      return a + b
  result = add(5, 3)
  print(result)
  ```
- **Lists**: Ordered, mutable collections.
  ```python
  fruits = ["Apple", "Banana", "Cherry"]
  print(fruits[0])  # Accessing elements
  ```
- **Tuples**: Immutable collections.
  ```python
  coordinates = (10, 20)
  ```
- **Dictionaries**: Key-value pairs.
  ```python
  student = {"name": "Alice", "age": 20}
  print(student["name"])  
  ```
- **List Comprehensions**: Efficient data transformations.
  ```python
  squares = [x**2 for x in range(5)]
  ```

### **Production-Level Tip:**
Use dictionary comprehensions for optimized data transformation.
```python
students = ["Alice", "Bob", "Charlie"]
grade_map = {student: "Not Graded" for student in students}
print(grade_map)
```

---

## **Day 4: Object-Oriented Programming (OOP)**
### **Concepts to Cover:**
- **Classes & Objects**: OOP organizes code better.
  ```python
  class Car:
      def __init__(self, brand, model):
          self.brand = brand
          self.model = model
  car = Car("Toyota", "Camry")
  print(car.brand)
  ```
- **Encapsulation**: Keeping data secure.
  ```python
  class BankAccount:
      def __init__(self, balance):
          self.__balance = balance
  ```

### **Why These Concepts Matter:**
OOP allows code reuse and better structuring, especially for large applications.

### **Production-Level Tip:**
Encapsulation keeps data safe from unintended modifications.

---

## **Day 5: File Handling & Error Handling**
### **Concepts to Cover:**
- **Reading/Writing Files**:
  ```python
  with open("data.txt", "r") as file:
      content = file.read()
  ```
- **Exception Handling**:
  ```python
  try:
      x = 5 / 0
  except ZeroDivisionError:
      print("Cannot divide by zero!")
  ```

### **Why These Concepts Matter:**
File handling is crucial for working with stored data.

---

## **Day 6: Modules, Libraries, and Virtual Environments**
### **Concepts to Cover:**
- **Using Modules**:
  ```python
  import math
  print(math.sqrt(16))
  ```
- **Installing Packages**:
  ```sh
  pip install requests
  ```
- **Using Virtual Environments**:
  ```sh
  python -m venv myenv
  ```

### **Why These Concepts Matter:**
Modules improve code organization and avoid redundancy.

---

## **Day 7: Mini Project & Code Refactoring**
### **Project:**
Build a **To-Do List Application** that allows users to:
- Add, remove, and display tasks
- Save tasks to a file

### **Concepts to Cover:**
- Applying all learned concepts
- Writing clean, maintainable code
- Understanding refactoring techniques

### **Why Refactoring Matters:**
Refactoring enhances readability, efficiency, and maintainability.

### **Production-Level Tip:**
Use functions to modularize code.
```python
class TodoList:
    def __init__(self):
        self.tasks = []

    def add_task(self, task):
        self.tasks.append(task)

    def show_tasks(self):
        for idx, task in enumerate(self.tasks, 1):
            print(f"{idx}. {task}")
```

By the end of Week 1, students will be confident in Python basics, best practices, and production-level coding techniques.

